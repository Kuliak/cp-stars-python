# coding: utf-8

"""
    Chemically Peculiar Stars Database OpenAPI definitions

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Magnitude(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'star': 'Star',
        'datasource': 'DataSource',
        'name': 'str',
        'value': 'float',
        'error': 'float',
        'quality': 'str',
        'uncertainty_flag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'star': 'star',
        'datasource': 'datasource',
        'name': 'name',
        'value': 'value',
        'error': 'error',
        'quality': 'quality',
        'uncertainty_flag': 'uncertaintyFlag'
    }

    def __init__(self, id=None, star=None, datasource=None, name=None, value=None, error=None, quality=None, uncertainty_flag=None, local_vars_configuration=None):  # noqa: E501
        """Magnitude - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._star = None
        self._datasource = None
        self._name = None
        self._value = None
        self._error = None
        self._quality = None
        self._uncertainty_flag = None
        self.discriminator = None

        self.id = id
        if star is not None:
            self.star = star
        self.datasource = datasource
        self.name = name
        self.value = value
        if error is not None:
            self.error = error
        if quality is not None:
            self.quality = quality
        if uncertainty_flag is not None:
            self.uncertainty_flag = uncertainty_flag

    @property
    def id(self):
        """Gets the id of this Magnitude.  # noqa: E501


        :return: The id of this Magnitude.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Magnitude.


        :param id: The id of this Magnitude.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def star(self):
        """Gets the star of this Magnitude.  # noqa: E501


        :return: The star of this Magnitude.  # noqa: E501
        :rtype: Star
        """
        return self._star

    @star.setter
    def star(self, star):
        """Sets the star of this Magnitude.


        :param star: The star of this Magnitude.  # noqa: E501
        :type star: Star
        """

        self._star = star

    @property
    def datasource(self):
        """Gets the datasource of this Magnitude.  # noqa: E501


        :return: The datasource of this Magnitude.  # noqa: E501
        :rtype: DataSource
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this Magnitude.


        :param datasource: The datasource of this Magnitude.  # noqa: E501
        :type datasource: DataSource
        """
        if self.local_vars_configuration.client_side_validation and datasource is None:  # noqa: E501
            raise ValueError("Invalid value for `datasource`, must not be `None`")  # noqa: E501

        self._datasource = datasource

    @property
    def name(self):
        """Gets the name of this Magnitude.  # noqa: E501


        :return: The name of this Magnitude.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Magnitude.


        :param name: The name of this Magnitude.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 10):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 0):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this Magnitude.  # noqa: E501


        :return: The value of this Magnitude.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Magnitude.


        :param value: The value of this Magnitude.  # noqa: E501
        :type value: float
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def error(self):
        """Gets the error of this Magnitude.  # noqa: E501


        :return: The error of this Magnitude.  # noqa: E501
        :rtype: float
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Magnitude.


        :param error: The error of this Magnitude.  # noqa: E501
        :type error: float
        """

        self._error = error

    @property
    def quality(self):
        """Gets the quality of this Magnitude.  # noqa: E501


        :return: The quality of this Magnitude.  # noqa: E501
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this Magnitude.


        :param quality: The quality of this Magnitude.  # noqa: E501
        :type quality: str
        """

        self._quality = quality

    @property
    def uncertainty_flag(self):
        """Gets the uncertainty_flag of this Magnitude.  # noqa: E501


        :return: The uncertainty_flag of this Magnitude.  # noqa: E501
        :rtype: str
        """
        return self._uncertainty_flag

    @uncertainty_flag.setter
    def uncertainty_flag(self, uncertainty_flag):
        """Sets the uncertainty_flag of this Magnitude.


        :param uncertainty_flag: The uncertainty_flag of this Magnitude.  # noqa: E501
        :type uncertainty_flag: str
        """

        self._uncertainty_flag = uncertainty_flag

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Magnitude):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Magnitude):
            return True

        return self.to_dict() != other.to_dict()
