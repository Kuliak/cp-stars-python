# coding: utf-8

"""
    Chemically Peculiar Stars Database OpenAPI definitions

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Star(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'considered_category_affiliation_probability_flag': 'str',
        'renson': 'str',
        'binary_system_component': 'str',
        'icrs_right_ascension': 'float',
        'icrs_right_ascension_error': 'float',
        'icrs_declination': 'float',
        'icrs_declination_error': 'float',
        'galactic_longitude': 'float',
        'galactic_latitude': 'float',
        'alpha': 'str',
        'delta': 'str'
    }

    attribute_map = {
        'id': 'id',
        'considered_category_affiliation_probability_flag': 'consideredCategoryAffiliationProbabilityFlag',
        'renson': 'renson',
        'binary_system_component': 'binarySystemComponent',
        'icrs_right_ascension': 'icrsRightAscension',
        'icrs_right_ascension_error': 'icrsRightAscensionError',
        'icrs_declination': 'icrsDeclination',
        'icrs_declination_error': 'icrsDeclinationError',
        'galactic_longitude': 'galacticLongitude',
        'galactic_latitude': 'galacticLatitude',
        'alpha': 'alpha',
        'delta': 'delta'
    }

    def __init__(self, id=None, considered_category_affiliation_probability_flag=None, renson=None, binary_system_component=None, icrs_right_ascension=None, icrs_right_ascension_error=None, icrs_declination=None, icrs_declination_error=None, galactic_longitude=None, galactic_latitude=None, alpha=None, delta=None, local_vars_configuration=None):  # noqa: E501
        """Star - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._considered_category_affiliation_probability_flag = None
        self._renson = None
        self._binary_system_component = None
        self._icrs_right_ascension = None
        self._icrs_right_ascension_error = None
        self._icrs_declination = None
        self._icrs_declination_error = None
        self._galactic_longitude = None
        self._galactic_latitude = None
        self._alpha = None
        self._delta = None
        self.discriminator = None

        self.id = id
        if considered_category_affiliation_probability_flag is not None:
            self.considered_category_affiliation_probability_flag = considered_category_affiliation_probability_flag
        if renson is not None:
            self.renson = renson
        if binary_system_component is not None:
            self.binary_system_component = binary_system_component
        if icrs_right_ascension is not None:
            self.icrs_right_ascension = icrs_right_ascension
        if icrs_right_ascension_error is not None:
            self.icrs_right_ascension_error = icrs_right_ascension_error
        if icrs_declination is not None:
            self.icrs_declination = icrs_declination
        if icrs_declination_error is not None:
            self.icrs_declination_error = icrs_declination_error
        if galactic_longitude is not None:
            self.galactic_longitude = galactic_longitude
        if galactic_latitude is not None:
            self.galactic_latitude = galactic_latitude
        if alpha is not None:
            self.alpha = alpha
        if delta is not None:
            self.delta = delta

    @property
    def id(self):
        """Gets the id of this Star.  # noqa: E501


        :return: The id of this Star.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Star.


        :param id: The id of this Star.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def considered_category_affiliation_probability_flag(self):
        """Gets the considered_category_affiliation_probability_flag of this Star.  # noqa: E501


        :return: The considered_category_affiliation_probability_flag of this Star.  # noqa: E501
        :rtype: str
        """
        return self._considered_category_affiliation_probability_flag

    @considered_category_affiliation_probability_flag.setter
    def considered_category_affiliation_probability_flag(self, considered_category_affiliation_probability_flag):
        """Sets the considered_category_affiliation_probability_flag of this Star.


        :param considered_category_affiliation_probability_flag: The considered_category_affiliation_probability_flag of this Star.  # noqa: E501
        :type considered_category_affiliation_probability_flag: str
        """
        if (self.local_vars_configuration.client_side_validation and
                considered_category_affiliation_probability_flag is not None and len(considered_category_affiliation_probability_flag) > 1):
            raise ValueError("Invalid value for `considered_category_affiliation_probability_flag`, length must be less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                considered_category_affiliation_probability_flag is not None and len(considered_category_affiliation_probability_flag) < 0):
            raise ValueError("Invalid value for `considered_category_affiliation_probability_flag`, length must be greater than or equal to `0`")  # noqa: E501

        self._considered_category_affiliation_probability_flag = considered_category_affiliation_probability_flag

    @property
    def renson(self):
        """Gets the renson of this Star.  # noqa: E501


        :return: The renson of this Star.  # noqa: E501
        :rtype: str
        """
        return self._renson

    @renson.setter
    def renson(self, renson):
        """Sets the renson of this Star.


        :param renson: The renson of this Star.  # noqa: E501
        :type renson: str
        """
        if (self.local_vars_configuration.client_side_validation and
                renson is not None and len(renson) > 8):
            raise ValueError("Invalid value for `renson`, length must be less than or equal to `8`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                renson is not None and len(renson) < 0):
            raise ValueError("Invalid value for `renson`, length must be greater than or equal to `0`")  # noqa: E501

        self._renson = renson

    @property
    def binary_system_component(self):
        """Gets the binary_system_component of this Star.  # noqa: E501


        :return: The binary_system_component of this Star.  # noqa: E501
        :rtype: str
        """
        return self._binary_system_component

    @binary_system_component.setter
    def binary_system_component(self, binary_system_component):
        """Sets the binary_system_component of this Star.


        :param binary_system_component: The binary_system_component of this Star.  # noqa: E501
        :type binary_system_component: str
        """
        if (self.local_vars_configuration.client_side_validation and
                binary_system_component is not None and len(binary_system_component) > 8):
            raise ValueError("Invalid value for `binary_system_component`, length must be less than or equal to `8`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                binary_system_component is not None and len(binary_system_component) < 0):
            raise ValueError("Invalid value for `binary_system_component`, length must be greater than or equal to `0`")  # noqa: E501

        self._binary_system_component = binary_system_component

    @property
    def icrs_right_ascension(self):
        """Gets the icrs_right_ascension of this Star.  # noqa: E501


        :return: The icrs_right_ascension of this Star.  # noqa: E501
        :rtype: float
        """
        return self._icrs_right_ascension

    @icrs_right_ascension.setter
    def icrs_right_ascension(self, icrs_right_ascension):
        """Sets the icrs_right_ascension of this Star.


        :param icrs_right_ascension: The icrs_right_ascension of this Star.  # noqa: E501
        :type icrs_right_ascension: float
        """
        if (self.local_vars_configuration.client_side_validation and
                icrs_right_ascension is not None and icrs_right_ascension > 360):  # noqa: E501
            raise ValueError("Invalid value for `icrs_right_ascension`, must be a value less than or equal to `360`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                icrs_right_ascension is not None and icrs_right_ascension < 0):  # noqa: E501
            raise ValueError("Invalid value for `icrs_right_ascension`, must be a value greater than or equal to `0`")  # noqa: E501

        self._icrs_right_ascension = icrs_right_ascension

    @property
    def icrs_right_ascension_error(self):
        """Gets the icrs_right_ascension_error of this Star.  # noqa: E501


        :return: The icrs_right_ascension_error of this Star.  # noqa: E501
        :rtype: float
        """
        return self._icrs_right_ascension_error

    @icrs_right_ascension_error.setter
    def icrs_right_ascension_error(self, icrs_right_ascension_error):
        """Sets the icrs_right_ascension_error of this Star.


        :param icrs_right_ascension_error: The icrs_right_ascension_error of this Star.  # noqa: E501
        :type icrs_right_ascension_error: float
        """

        self._icrs_right_ascension_error = icrs_right_ascension_error

    @property
    def icrs_declination(self):
        """Gets the icrs_declination of this Star.  # noqa: E501


        :return: The icrs_declination of this Star.  # noqa: E501
        :rtype: float
        """
        return self._icrs_declination

    @icrs_declination.setter
    def icrs_declination(self, icrs_declination):
        """Sets the icrs_declination of this Star.


        :param icrs_declination: The icrs_declination of this Star.  # noqa: E501
        :type icrs_declination: float
        """
        if (self.local_vars_configuration.client_side_validation and
                icrs_declination is not None and icrs_declination > 90):  # noqa: E501
            raise ValueError("Invalid value for `icrs_declination`, must be a value less than or equal to `90`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                icrs_declination is not None and icrs_declination < -90):  # noqa: E501
            raise ValueError("Invalid value for `icrs_declination`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._icrs_declination = icrs_declination

    @property
    def icrs_declination_error(self):
        """Gets the icrs_declination_error of this Star.  # noqa: E501


        :return: The icrs_declination_error of this Star.  # noqa: E501
        :rtype: float
        """
        return self._icrs_declination_error

    @icrs_declination_error.setter
    def icrs_declination_error(self, icrs_declination_error):
        """Sets the icrs_declination_error of this Star.


        :param icrs_declination_error: The icrs_declination_error of this Star.  # noqa: E501
        :type icrs_declination_error: float
        """

        self._icrs_declination_error = icrs_declination_error

    @property
    def galactic_longitude(self):
        """Gets the galactic_longitude of this Star.  # noqa: E501


        :return: The galactic_longitude of this Star.  # noqa: E501
        :rtype: float
        """
        return self._galactic_longitude

    @galactic_longitude.setter
    def galactic_longitude(self, galactic_longitude):
        """Sets the galactic_longitude of this Star.


        :param galactic_longitude: The galactic_longitude of this Star.  # noqa: E501
        :type galactic_longitude: float
        """
        if (self.local_vars_configuration.client_side_validation and
                galactic_longitude is not None and galactic_longitude > 360):  # noqa: E501
            raise ValueError("Invalid value for `galactic_longitude`, must be a value less than or equal to `360`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                galactic_longitude is not None and galactic_longitude < 0):  # noqa: E501
            raise ValueError("Invalid value for `galactic_longitude`, must be a value greater than or equal to `0`")  # noqa: E501

        self._galactic_longitude = galactic_longitude

    @property
    def galactic_latitude(self):
        """Gets the galactic_latitude of this Star.  # noqa: E501


        :return: The galactic_latitude of this Star.  # noqa: E501
        :rtype: float
        """
        return self._galactic_latitude

    @galactic_latitude.setter
    def galactic_latitude(self, galactic_latitude):
        """Sets the galactic_latitude of this Star.


        :param galactic_latitude: The galactic_latitude of this Star.  # noqa: E501
        :type galactic_latitude: float
        """
        if (self.local_vars_configuration.client_side_validation and
                galactic_latitude is not None and galactic_latitude > 90):  # noqa: E501
            raise ValueError("Invalid value for `galactic_latitude`, must be a value less than or equal to `90`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                galactic_latitude is not None and galactic_latitude < -90):  # noqa: E501
            raise ValueError("Invalid value for `galactic_latitude`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._galactic_latitude = galactic_latitude

    @property
    def alpha(self):
        """Gets the alpha of this Star.  # noqa: E501


        :return: The alpha of this Star.  # noqa: E501
        :rtype: str
        """
        return self._alpha

    @alpha.setter
    def alpha(self, alpha):
        """Sets the alpha of this Star.


        :param alpha: The alpha of this Star.  # noqa: E501
        :type alpha: str
        """
        if (self.local_vars_configuration.client_side_validation and
                alpha is not None and len(alpha) > 20):
            raise ValueError("Invalid value for `alpha`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                alpha is not None and len(alpha) < 0):
            raise ValueError("Invalid value for `alpha`, length must be greater than or equal to `0`")  # noqa: E501

        self._alpha = alpha

    @property
    def delta(self):
        """Gets the delta of this Star.  # noqa: E501


        :return: The delta of this Star.  # noqa: E501
        :rtype: str
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this Star.


        :param delta: The delta of this Star.  # noqa: E501
        :type delta: str
        """
        if (self.local_vars_configuration.client_side_validation and
                delta is not None and len(delta) > 20):
            raise ValueError("Invalid value for `delta`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                delta is not None and len(delta) < 0):
            raise ValueError("Invalid value for `delta`, length must be greater than or equal to `0`")  # noqa: E501

        self._delta = delta

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Star):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Star):
            return True

        return self.to_dict() != other.to_dict()
