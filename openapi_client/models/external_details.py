# coding: utf-8

"""
    Chemically Peculiar Stars Database OpenAPI definitions

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ExternalDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'effective_temperature': 'float',
        'effective_temperature_unit': 'str',
        'redshift': 'float',
        'vizier_tables': 'list[VizierTable]',
        'effective_temperature_values': 'str',
        'effective_temperature_values_regex': 'str'
    }

    attribute_map = {
        'effective_temperature': 'effectiveTemperature',
        'effective_temperature_unit': 'effectiveTemperatureUnit',
        'redshift': 'redshift',
        'vizier_tables': 'vizierTables',
        'effective_temperature_values': 'effectiveTemperatureValues',
        'effective_temperature_values_regex': 'effective_TEMPERATURE_VALUES_REGEX'
    }

    def __init__(self, effective_temperature=None, effective_temperature_unit=None, redshift=None, vizier_tables=None, effective_temperature_values=None, effective_temperature_values_regex=None, local_vars_configuration=None):  # noqa: E501
        """ExternalDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._effective_temperature = None
        self._effective_temperature_unit = None
        self._redshift = None
        self._vizier_tables = None
        self._effective_temperature_values = None
        self._effective_temperature_values_regex = None
        self.discriminator = None

        if effective_temperature is not None:
            self.effective_temperature = effective_temperature
        if effective_temperature_unit is not None:
            self.effective_temperature_unit = effective_temperature_unit
        if redshift is not None:
            self.redshift = redshift
        if vizier_tables is not None:
            self.vizier_tables = vizier_tables
        if effective_temperature_values is not None:
            self.effective_temperature_values = effective_temperature_values
        if effective_temperature_values_regex is not None:
            self.effective_temperature_values_regex = effective_temperature_values_regex

    @property
    def effective_temperature(self):
        """Gets the effective_temperature of this ExternalDetails.  # noqa: E501


        :return: The effective_temperature of this ExternalDetails.  # noqa: E501
        :rtype: float
        """
        return self._effective_temperature

    @effective_temperature.setter
    def effective_temperature(self, effective_temperature):
        """Sets the effective_temperature of this ExternalDetails.


        :param effective_temperature: The effective_temperature of this ExternalDetails.  # noqa: E501
        :type effective_temperature: float
        """

        self._effective_temperature = effective_temperature

    @property
    def effective_temperature_unit(self):
        """Gets the effective_temperature_unit of this ExternalDetails.  # noqa: E501


        :return: The effective_temperature_unit of this ExternalDetails.  # noqa: E501
        :rtype: str
        """
        return self._effective_temperature_unit

    @effective_temperature_unit.setter
    def effective_temperature_unit(self, effective_temperature_unit):
        """Sets the effective_temperature_unit of this ExternalDetails.


        :param effective_temperature_unit: The effective_temperature_unit of this ExternalDetails.  # noqa: E501
        :type effective_temperature_unit: str
        """

        self._effective_temperature_unit = effective_temperature_unit

    @property
    def redshift(self):
        """Gets the redshift of this ExternalDetails.  # noqa: E501


        :return: The redshift of this ExternalDetails.  # noqa: E501
        :rtype: float
        """
        return self._redshift

    @redshift.setter
    def redshift(self, redshift):
        """Sets the redshift of this ExternalDetails.


        :param redshift: The redshift of this ExternalDetails.  # noqa: E501
        :type redshift: float
        """

        self._redshift = redshift

    @property
    def vizier_tables(self):
        """Gets the vizier_tables of this ExternalDetails.  # noqa: E501


        :return: The vizier_tables of this ExternalDetails.  # noqa: E501
        :rtype: list[VizierTable]
        """
        return self._vizier_tables

    @vizier_tables.setter
    def vizier_tables(self, vizier_tables):
        """Sets the vizier_tables of this ExternalDetails.


        :param vizier_tables: The vizier_tables of this ExternalDetails.  # noqa: E501
        :type vizier_tables: list[VizierTable]
        """

        self._vizier_tables = vizier_tables

    @property
    def effective_temperature_values(self):
        """Gets the effective_temperature_values of this ExternalDetails.  # noqa: E501


        :return: The effective_temperature_values of this ExternalDetails.  # noqa: E501
        :rtype: str
        """
        return self._effective_temperature_values

    @effective_temperature_values.setter
    def effective_temperature_values(self, effective_temperature_values):
        """Sets the effective_temperature_values of this ExternalDetails.


        :param effective_temperature_values: The effective_temperature_values of this ExternalDetails.  # noqa: E501
        :type effective_temperature_values: str
        """

        self._effective_temperature_values = effective_temperature_values

    @property
    def effective_temperature_values_regex(self):
        """Gets the effective_temperature_values_regex of this ExternalDetails.  # noqa: E501


        :return: The effective_temperature_values_regex of this ExternalDetails.  # noqa: E501
        :rtype: str
        """
        return self._effective_temperature_values_regex

    @effective_temperature_values_regex.setter
    def effective_temperature_values_regex(self, effective_temperature_values_regex):
        """Sets the effective_temperature_values_regex of this ExternalDetails.


        :param effective_temperature_values_regex: The effective_temperature_values_regex of this ExternalDetails.  # noqa: E501
        :type effective_temperature_values_regex: str
        """

        self._effective_temperature_values_regex = effective_temperature_values_regex

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalDetails):
            return True

        return self.to_dict() != other.to_dict()
