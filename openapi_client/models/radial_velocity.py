# coding: utf-8

"""
    Chemically Peculiar Stars Database OpenAPI definitions

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RadialVelocity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'star': 'Star',
        'datasource': 'DataSource',
        'radial_velocity': 'float',
        'radial_velocity_error': 'float'
    }

    attribute_map = {
        'id': 'id',
        'star': 'star',
        'datasource': 'datasource',
        'radial_velocity': 'radialVelocity',
        'radial_velocity_error': 'radialVelocityError'
    }

    def __init__(self, id=None, star=None, datasource=None, radial_velocity=None, radial_velocity_error=None, local_vars_configuration=None):  # noqa: E501
        """RadialVelocity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._star = None
        self._datasource = None
        self._radial_velocity = None
        self._radial_velocity_error = None
        self.discriminator = None

        self.id = id
        if star is not None:
            self.star = star
        self.datasource = datasource
        self.radial_velocity = radial_velocity
        if radial_velocity_error is not None:
            self.radial_velocity_error = radial_velocity_error

    @property
    def id(self):
        """Gets the id of this RadialVelocity.  # noqa: E501


        :return: The id of this RadialVelocity.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RadialVelocity.


        :param id: The id of this RadialVelocity.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def star(self):
        """Gets the star of this RadialVelocity.  # noqa: E501


        :return: The star of this RadialVelocity.  # noqa: E501
        :rtype: Star
        """
        return self._star

    @star.setter
    def star(self, star):
        """Sets the star of this RadialVelocity.


        :param star: The star of this RadialVelocity.  # noqa: E501
        :type star: Star
        """

        self._star = star

    @property
    def datasource(self):
        """Gets the datasource of this RadialVelocity.  # noqa: E501


        :return: The datasource of this RadialVelocity.  # noqa: E501
        :rtype: DataSource
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this RadialVelocity.


        :param datasource: The datasource of this RadialVelocity.  # noqa: E501
        :type datasource: DataSource
        """
        if self.local_vars_configuration.client_side_validation and datasource is None:  # noqa: E501
            raise ValueError("Invalid value for `datasource`, must not be `None`")  # noqa: E501

        self._datasource = datasource

    @property
    def radial_velocity(self):
        """Gets the radial_velocity of this RadialVelocity.  # noqa: E501


        :return: The radial_velocity of this RadialVelocity.  # noqa: E501
        :rtype: float
        """
        return self._radial_velocity

    @radial_velocity.setter
    def radial_velocity(self, radial_velocity):
        """Sets the radial_velocity of this RadialVelocity.


        :param radial_velocity: The radial_velocity of this RadialVelocity.  # noqa: E501
        :type radial_velocity: float
        """
        if self.local_vars_configuration.client_side_validation and radial_velocity is None:  # noqa: E501
            raise ValueError("Invalid value for `radial_velocity`, must not be `None`")  # noqa: E501

        self._radial_velocity = radial_velocity

    @property
    def radial_velocity_error(self):
        """Gets the radial_velocity_error of this RadialVelocity.  # noqa: E501


        :return: The radial_velocity_error of this RadialVelocity.  # noqa: E501
        :rtype: float
        """
        return self._radial_velocity_error

    @radial_velocity_error.setter
    def radial_velocity_error(self, radial_velocity_error):
        """Sets the radial_velocity_error of this RadialVelocity.


        :param radial_velocity_error: The radial_velocity_error of this RadialVelocity.  # noqa: E501
        :type radial_velocity_error: float
        """

        self._radial_velocity_error = radial_velocity_error

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RadialVelocity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RadialVelocity):
            return True

        return self.to_dict() != other.to_dict()
