# coding: utf-8

"""
    Chemically Peculiar Stars Database OpenAPI definitions

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ExportCsvForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'star_ids_to_export': 'list[int]',
        'empty_value_representation': 'str',
        'export_attributes': 'bool',
        'export_identifiers': 'bool',
        'export_magnitudes': 'bool',
        'export_motions': 'bool',
        'export_radial_velocities': 'bool',
        'default_empty_value_representation': 'str'
    }

    attribute_map = {
        'star_ids_to_export': 'starIdsToExport',
        'empty_value_representation': 'emptyValueRepresentation',
        'export_attributes': 'exportAttributes',
        'export_identifiers': 'exportIdentifiers',
        'export_magnitudes': 'exportMagnitudes',
        'export_motions': 'exportMotions',
        'export_radial_velocities': 'exportRadialVelocities',
        'default_empty_value_representation': 'default_EMPTY_VALUE_REPRESENTATION'
    }

    def __init__(self, star_ids_to_export=None, empty_value_representation=None, export_attributes=None, export_identifiers=None, export_magnitudes=None, export_motions=None, export_radial_velocities=None, default_empty_value_representation=None, local_vars_configuration=None):  # noqa: E501
        """ExportCsvForm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._star_ids_to_export = None
        self._empty_value_representation = None
        self._export_attributes = None
        self._export_identifiers = None
        self._export_magnitudes = None
        self._export_motions = None
        self._export_radial_velocities = None
        self._default_empty_value_representation = None
        self.discriminator = None

        if star_ids_to_export is not None:
            self.star_ids_to_export = star_ids_to_export
        if empty_value_representation is not None:
            self.empty_value_representation = empty_value_representation
        if export_attributes is not None:
            self.export_attributes = export_attributes
        if export_identifiers is not None:
            self.export_identifiers = export_identifiers
        if export_magnitudes is not None:
            self.export_magnitudes = export_magnitudes
        if export_motions is not None:
            self.export_motions = export_motions
        if export_radial_velocities is not None:
            self.export_radial_velocities = export_radial_velocities
        if default_empty_value_representation is not None:
            self.default_empty_value_representation = default_empty_value_representation

    @property
    def star_ids_to_export(self):
        """Gets the star_ids_to_export of this ExportCsvForm.  # noqa: E501


        :return: The star_ids_to_export of this ExportCsvForm.  # noqa: E501
        :rtype: list[int]
        """
        return self._star_ids_to_export

    @star_ids_to_export.setter
    def star_ids_to_export(self, star_ids_to_export):
        """Sets the star_ids_to_export of this ExportCsvForm.


        :param star_ids_to_export: The star_ids_to_export of this ExportCsvForm.  # noqa: E501
        :type star_ids_to_export: list[int]
        """

        self._star_ids_to_export = star_ids_to_export

    @property
    def empty_value_representation(self):
        """Gets the empty_value_representation of this ExportCsvForm.  # noqa: E501


        :return: The empty_value_representation of this ExportCsvForm.  # noqa: E501
        :rtype: str
        """
        return self._empty_value_representation

    @empty_value_representation.setter
    def empty_value_representation(self, empty_value_representation):
        """Sets the empty_value_representation of this ExportCsvForm.


        :param empty_value_representation: The empty_value_representation of this ExportCsvForm.  # noqa: E501
        :type empty_value_representation: str
        """

        self._empty_value_representation = empty_value_representation

    @property
    def export_attributes(self):
        """Gets the export_attributes of this ExportCsvForm.  # noqa: E501


        :return: The export_attributes of this ExportCsvForm.  # noqa: E501
        :rtype: bool
        """
        return self._export_attributes

    @export_attributes.setter
    def export_attributes(self, export_attributes):
        """Sets the export_attributes of this ExportCsvForm.


        :param export_attributes: The export_attributes of this ExportCsvForm.  # noqa: E501
        :type export_attributes: bool
        """

        self._export_attributes = export_attributes

    @property
    def export_identifiers(self):
        """Gets the export_identifiers of this ExportCsvForm.  # noqa: E501


        :return: The export_identifiers of this ExportCsvForm.  # noqa: E501
        :rtype: bool
        """
        return self._export_identifiers

    @export_identifiers.setter
    def export_identifiers(self, export_identifiers):
        """Sets the export_identifiers of this ExportCsvForm.


        :param export_identifiers: The export_identifiers of this ExportCsvForm.  # noqa: E501
        :type export_identifiers: bool
        """

        self._export_identifiers = export_identifiers

    @property
    def export_magnitudes(self):
        """Gets the export_magnitudes of this ExportCsvForm.  # noqa: E501


        :return: The export_magnitudes of this ExportCsvForm.  # noqa: E501
        :rtype: bool
        """
        return self._export_magnitudes

    @export_magnitudes.setter
    def export_magnitudes(self, export_magnitudes):
        """Sets the export_magnitudes of this ExportCsvForm.


        :param export_magnitudes: The export_magnitudes of this ExportCsvForm.  # noqa: E501
        :type export_magnitudes: bool
        """

        self._export_magnitudes = export_magnitudes

    @property
    def export_motions(self):
        """Gets the export_motions of this ExportCsvForm.  # noqa: E501


        :return: The export_motions of this ExportCsvForm.  # noqa: E501
        :rtype: bool
        """
        return self._export_motions

    @export_motions.setter
    def export_motions(self, export_motions):
        """Sets the export_motions of this ExportCsvForm.


        :param export_motions: The export_motions of this ExportCsvForm.  # noqa: E501
        :type export_motions: bool
        """

        self._export_motions = export_motions

    @property
    def export_radial_velocities(self):
        """Gets the export_radial_velocities of this ExportCsvForm.  # noqa: E501


        :return: The export_radial_velocities of this ExportCsvForm.  # noqa: E501
        :rtype: bool
        """
        return self._export_radial_velocities

    @export_radial_velocities.setter
    def export_radial_velocities(self, export_radial_velocities):
        """Sets the export_radial_velocities of this ExportCsvForm.


        :param export_radial_velocities: The export_radial_velocities of this ExportCsvForm.  # noqa: E501
        :type export_radial_velocities: bool
        """

        self._export_radial_velocities = export_radial_velocities

    @property
    def default_empty_value_representation(self):
        """Gets the default_empty_value_representation of this ExportCsvForm.  # noqa: E501


        :return: The default_empty_value_representation of this ExportCsvForm.  # noqa: E501
        :rtype: str
        """
        return self._default_empty_value_representation

    @default_empty_value_representation.setter
    def default_empty_value_representation(self, default_empty_value_representation):
        """Sets the default_empty_value_representation of this ExportCsvForm.


        :param default_empty_value_representation: The default_empty_value_representation of this ExportCsvForm.  # noqa: E501
        :type default_empty_value_representation: str
        """

        self._default_empty_value_representation = default_empty_value_representation

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportCsvForm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExportCsvForm):
            return True

        return self.to_dict() != other.to_dict()
